
import ./entitytags as entityTags
import ./chances as chances
import ./loottables as lootTables
from ./particles import circle
from bolt_expressions import Scoreboard, Data
from allay import Parser
from ast import literal_eval

mainScore = ctx.inject(Scoreboard).objective("ps-mob")
config = ctx.inject(Scoreboard).objective("ps-mob.config")
p = Parser()

append function_tag load:load {"values":["ps-mob:load"]}
function ./load:
    scoreboard objectives add ps-mob dummy
    scoreboard objectives add ps-mob.config dummy [{"text":"M","color":"white"},{"text":"o","color":"#FF0000"},{"text":"b C","color":"white"},{"text":"a","color":"#FF0000"},{"text":"ptains ","color":"white"},{"text":"Config","color":"gold"}]

    def setBaseConfig(name, value):
        unless score f'{name}' ps-mob.config = f'{name}' ps-mob.config:
            config[f'{name}'] = value

    setBaseConfig(".cool_down", 60)
    setBaseConfig(".spawn_chance", 10)

    setBaseConfig(".weight_common", 55)
    setBaseConfig(".weight_uncommon", 30)
    setBaseConfig(".weight_rare", 9)
    setBaseConfig(".weight_legendary", 1)

    setBaseConfig(".notify_on_spawn", 2)
    setBaseConfig(".beam_on_spawn", 1)

    unless score #random ps-mob = #random ps-mob store result score #random ps-mob run seed
    unless score #rand_a ps-mob = #rand_a ps-mob:
        mainScore["#rand_a"] = 1234567
    unless score #rand_c ps-mob = #rand_c ps-mob:
        mainScore["#rand_c"] = 1234567

    schedule function ./tick 2t replace:
        schedule function ./tick 2t replace
        as @e[type=#ps-mob:captains,tag=ps-mob.captain] at @s run function ./particles/main:
            if entity @s[tag=ps-mob.common] run function ./particles/common:
                circle(1, 15, "dust 1 1 1 1", offset=(0,0.1,0))
                circle(2, 30, "dust 1 1 1 1", offset=(0,0.1,0))
            if entity @s[tag=ps-mob.uncommon] run function ./particles/uncommon:
                circle(1, 15, "dust 0 1 0 1", offset=(0,0.1,0))
                circle(2, 30, "dust 0 1 0 1", offset=(0,0.1,0))
            if entity @s[tag=ps-mob.rare] run function ./particles/rare:
                circle(1, 15, "dust 0.7 0 1 1", offset=(0,0.1,0))
                circle(2, 30, "dust 0.7 0 1 1", offset=(0,0.1,0))
            if entity @s[tag=ps-mob.legendary] run function ./particles/legendary:
                circle(1, 15, "dust 10 10 10 1", offset=(0,0.1,0))
                circle(2, 30, "dust 10 10 10 1", offset=(0,0.1,0))
            anchored eyes positioned ^ ^ ^ run function ./particles/head:
                circle(0.25, 5, "soul_fire_flame", "out", 0.03, movement_offset=(0,2,0), offset=(0,0.8,0))
                circle(0.25, 5, "flame", "out", 0.13, offset=(0,0.8,0))

    schedule function ./register_new 1s replace:
        schedule function ./register_new 1s replace
        if score .cool_down ps-mob matches 1..:
            mainScore[".cool_down"] -= 1
        unless score .cool_down ps-mob matches 1..
            as @e[type=#ps-mob:captains,tag=!ps-mob,tag=!smithed.entity]
            run function ./captain_check
        tag @e[type=#ps-mob:captains,tag=!ps-mob,tag=!smithed.entity] add ps-mob

function ./captain_check:
    unless score .cool_down ps-mob matches 1..:
        mainScore[".faliure"] += 1

    mainScore["#try"].reset()
    unless score .cool_down ps-mob matches 1..
        if predicate ./should_spawn
        if predicate ./per_failure:
            mainScore["#try"] = 1

    mainScore[".weight_max"] = config[".weight_common"] + config[".weight_uncommon"] + config[".weight_rare"] + config[".weight_legendary"]
    function ./next_random
    mainScore[".rand%"] = (mainScore["#random"] % mainScore[".weight_max"]) + 1

    if score #try ps-mob matches 1
        unless score .cool_down ps-mob matches 1..
        if score .rand% ps-mob <= .weight_common ps-mob.config
        run function ./convert/common:
            attribute @s minecraft:generic.max_health modifier add 15213119-2-2-2-2 ps-mob.max_health 0.5 multiply
            attribute @s minecraft:generic.armor modifier add 15213119-2-2-2-2 ps-mob.armor 2 add
            attribute @s minecraft:generic.movement_speed modifier add 15213119-2-2-2-2 ps-mob.movement_speed 0.15 multiply
            attribute @s minecraft:generic.attack_damage modifier add 15213119-2-2-2-2 ps-mob.attack_damage 0.7 multiply
            attribute @s minecraft:generic.knockback_resistance modifier add 15213119-2-2-2-2 ps-mob.knockback_resistance 0.03 add
            tag @s add ps-mob.common
            data modify entity @s DeathLootTable set value "ps-mob:captain/common"
            if score .notify_on_spawn ps-mob.config matches 4.. at @s run tellraw @a[distance=..128] literal_eval(p.parse("[☠](color=gray)[ A ](color=white)[common Mob Captain](color=gray)[ has spawned nearby!](color=white)"))
            if score .notify_on_spawn ps-mob.config matches 4.. at @s run playsound entity.wither.spawn ambient @a[distance=..128] ~ ~ ~ 0.5 1.8 0.5
            if score .beam_on_spawn ps-mob.config matches 1 at @s run particle dust 1 1 1 5 ~ ~ ~ 0 200 0 0 300 force
            function ./convert/captain
    if score #try ps-mob matches 1:
        mainScore[".rand%"] -= config[".weight_common"]

    if score #try ps-mob matches 1
        unless score .cool_down ps-mob matches 1..
        if predicate ./weighted
        run function ./convert/uncommon:
            attribute @s minecraft:generic.max_health modifier add 15213119-2-2-2-2 ps-mob.max_health 0.9 multiply
            attribute @s minecraft:generic.armor modifier add 15213119-2-2-2-2 ps-mob.armor 4 add
            attribute @s minecraft:generic.movement_speed modifier add 15213119-2-2-2-2 ps-mob.movement_speed 0.25 multiply
            attribute @s minecraft:generic.attack_damage modifier add 15213119-2-2-2-2 ps-mob.attack_damage 1.2 multiply
            attribute @s minecraft:generic.knockback_resistance modifier add 15213119-2-2-2-2 ps-mob.knockback_resistance 0.1 add
            tag @s add ps-mob.uncommon
            data modify entity @s DeathLootTable set value "ps-mob:captain/uncommon"
            if score .notify_on_spawn ps-mob.config matches 3.. at @s run tellraw @a[distance=..128] literal_eval(p.parse("[☠](color=#00FF00)[ An ](color=white)[uncommon Mob Captain](color=#00FF00)[ has spawned nearby!](color=white)"))
            if score .notify_on_spawn ps-mob.config matches 3.. at @s run playsound entity.wither.spawn ambient @a[distance=..128] ~ ~ ~ 0.5 1.8 0.5
            if score .beam_on_spawn ps-mob.config matches 1 at @s run particle dust 0 1 0 5 ~ ~ ~ 0 200 0 0 300 force
            function ./convert/captain
    if score #try ps-mob matches 1:
        mainScore[".rand%"] -= config[".weight_uncommon"]

    if score #try ps-mob matches 1
        unless score .cool_down ps-mob matches 1..
        if predicate ./weighted
        run function ./convert/rare:
            attribute @s minecraft:generic.max_health modifier add 15213119-2-2-2-2 ps-mob.max_health 1.8 multiply
            attribute @s minecraft:generic.armor modifier add 15213119-2-2-2-2 ps-mob.armor 8 add
            attribute @s minecraft:generic.movement_speed modifier add 15213119-2-2-2-2 ps-mob.movement_speed 0.4 multiply
            attribute @s minecraft:generic.attack_damage modifier add 15213119-2-2-2-2 ps-mob.attack_damage 2.1 multiply
            attribute @s minecraft:generic.knockback_resistance modifier add 15213119-2-2-2-2 ps-mob.knockback_resistance 0.5 add
            tag @s add ps-mob.rare
            data modify entity @s DeathLootTable set value "ps-mob:captain/rare"
            if score .notify_on_spawn ps-mob.config matches 2.. at @s run tellraw @a[distance=..128] literal_eval(p.parse("[☠](color=#B400FF)[ A ](color=white)[rare Mob Captain](color=#B400FF)[ has spawned nearby!](color=white)"))
            if score .notify_on_spawn ps-mob.config matches 2.. at @s run playsound entity.wither.spawn ambient @a[distance=..128] ~ ~ ~ 0.5 1.8 0.5
            if score .beam_on_spawn ps-mob.config matches 1 at @s run particle dust 0.7 0 1 5 ~ ~ ~ 0 200 0 0 300 force
            function ./convert/captain
    if score #try ps-mob matches 1:
        mainScore[".rand%"] -= config[".weight_rare"]

    if score #try ps-mob matches 1
        unless score .cool_down ps-mob matches 1..
        if predicate ./weighted
        run function ./convert/legendary:
            attribute @s minecraft:generic.max_health modifier add 15213119-2-2-2-2 ps-mob.max_health 2.7 multiply
            attribute @s minecraft:generic.armor modifier add 15213119-2-2-2-2 ps-mob.armor 15 add
            attribute @s minecraft:generic.movement_speed modifier add 15213119-2-2-2-2 ps-mob.movement_speed 0.8 multiply
            attribute @s minecraft:generic.attack_damage modifier add 15213119-2-2-2-2 ps-mob.attack_damage 3 multiply
            attribute @s minecraft:generic.knockback_resistance modifier add 15213119-2-2-2-2 ps-mob.knockback_resistance 1 add
            tag @s add ps-mob.legendary
            data modify entity @s DeathLootTable set value "ps-mob:captain/legendary"
            if score .notify_on_spawn ps-mob.config matches 1.. at @s run tellraw @a[distance=..128] literal_eval(p.parse("[☠](color=red)[ A ](color=white)[l](color=#ff5151)[e](color=#ffb74d)[g](color=#ffff87)[e](color=#51ff51)[n](color=#4d4dff)[d](color=#9933cc)[a](color=#cc66cc)[r](color=#cc00cc)[y](color=#ff87ff)[ Mob Captain](color=red)[ has spawned nearby!](color=white)"))
            if score .notify_on_spawn ps-mob.config matches 1.. at @s run playsound entity.wither.spawn ambient @a[distance=..128] ~ ~ ~ 0.5 1.8 0.5
            if score .beam_on_spawn ps-mob.config matches 1 at @s run particle dust 10 10 10 5 ~ ~ ~ 0 200 0 0 300 force
            function ./convert/captain

function ./convert/captain:
    tag @s add smithed.entity
    tag @s add ps-mob.captain
    mainScore["#try"].reset()
    mainScore[".faliure"].reset()
    mainScore[".cool_down"] = config[".cool_down"]
    store result entity @s Health float 1:
        attribute @s minecraft:generic.max_health get

function ./next_random:
    mainScore["#random"] *= mainScore["#rand_a"]
    mainScore["#random"] += mainScore["#rand_c"]
